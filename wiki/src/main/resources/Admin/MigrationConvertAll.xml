<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Admin</web>
<name>MigrationConvertAll</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.LudovicDubost</creator>
<author>XWiki.LudovicDubost</author>
<customClass></customClass>
<contentAuthor>XWiki.LudovicDubost</contentAuthor>
<creationDate>1229719215000</creationDate>
<date>1234885210000</date>
<contentUpdateDate>1234885210000</contentUpdateDate>
<version>17.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Fix</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Admin.MigrationConvertAll</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>1 Convert

&lt;%
import com.xpn.xwiki.*;

def econtext = context.context.getEngineContext()
def migrunning =  econtext.getAttribute("migration_isrunning")

// We check if a migration is already running
if ((migrunning!=null) &amp;&amp; (migrunning.equals("1"))) {
 println "A migration is already running"
} else {
try {

 // mark the migration running
 econtext.setAttribute("migration_isrunning", "1")

 // setting some status data
 faillist = new ArrayList() 
 econtext.setAttribute("migration_faillist", faillist) 
 econtext.setAttribute("migration_enddate", "")
 econtext.setAttribute("migration_startdate", new Date())
 econtext.setAttribute("migration_cancel", "")

 nb = 0
cancel = false
totalnb = xwiki.search("select count(*) from XWikiDocument as doc,BaseObject as obj where doc.fullName=obj.name and obj.className='XWiki.AssetClass' and doc.web not in ('AssetTemp')").get(0)

econtext.setAttribute("migration_totalnb", totalnb)

println "${totalnb} docs to convert"
System.out.println("&lt;strong&gt;${totalnb} docs to convert&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;")

for(item in xwiki.searchDocuments(",BaseObject as obj where doc.fullName=obj.name and obj.className='XWiki.AssetClass' and doc.web not in ('AssetTemp')")) {
if (!cancel) { 
 nb = nb + 1
 
 if (request.test &amp;&amp; request.test == "1") {
  try {
   Thread.sleep(15000);
  } catch (Throwable e) {
  }
 }

def migcancel =  econtext.getAttribute("migration_cancel")
if ((migcancel!=null)&amp;&amp;(migcancel=="1")) {
   // we should stop the migration
   econtext.setAttribute("migration_enddate", new Date())
   cancel = true;
   break;
}


econtext.setAttribute("migration_nb", nb)

def itemdoc;
def customclass = "no custom class found"

System.out.println("CONVERT: ${nb} ${item}")
if (request.prepare=="1" || request.confirm=="1")  {
 def url = "" 
 def isNew = ""; 
 try {
  itemdoc = xwiki.getDocument(item)
  url = itemdoc.getExternalURL()
  isNew = itemdoc.isNew();
  customclass = itemdoc.document.getCustomClass()
 } catch (Exception e) {
  url = "cannot load document"
  e.printStackTrace()
  println "Exception while reading document ${e.message}"
 }

 itemname = xwiki.escapeText(item)

 println "&lt;br /&gt;Doc number ${nb}: &lt;ul&gt;&lt;li&gt;${itemname}&lt;li&gt;${url}&lt;li&gt;${isNew}  &lt;li&gt;Custom class: ${customclass}&lt;/ul&gt;"
 } else {
 itemname = xwiki.escapeText(item)
 println "&lt;br /&gt;Doc number ${nb}: ${itemname}"
 }

 // check the custom class if it is not set properly
 if (request.confirm) {
  // we need to force the custom class to the right class otherwise
  // we cannot call convert
  if (itemdoc!=null &amp;&amp; customclass != "org.curriki.xwiki.plugin.asset.Asset") {
     itemdoc.setCustomClass("org.curriki.xwiki.plugin.asset.Asset");
     itemdoc.saveWithProgrammingRights();
  }

   // run the real conversion
   try {
     xwiki.getDocument(item).convert()
   } catch (XWikiException e) {
    System.out.println("CONVERT FAIL: ${nb} ${item}")
    faillist.add(item)
    e.printStackTrace()
     println "Exception while converting ${e.fullMessage}"
   } catch (Exception e) {
    System.out.println("CONVERT FAIL: ${nb} ${item}")
    faillist.add(item)
    e.printStackTrace()
    println "Exception while converting ${e.message}"
   } // end real conversion
  } // end is confirm
 } // end is cancelled
} // end for

if (cancel) {
 println "&lt;br /&gt;&lt;br /&gt;Migration was cancelled by an administrator&lt;br /&gt;"
}

// set the end date in the migration status
econtext.setAttribute("migration_enddate", new Date())

if(!request.confirm) {
 println "&lt;br /&gt;&lt;br /&gt;"
 println "[Confirm conversion&gt;${doc.fullName}?confirm=1]"
 println "[View details&gt;${doc.fullName}?prepare=1] (warning: don't use this if there are more than 200 documents to convert)"
}

} catch (Throwable e) {
 throw e;
} finally {
 econtext.setAttribute("migration_isrunning", "")
}

} // end is running

%&gt;

</content></xwikidoc>