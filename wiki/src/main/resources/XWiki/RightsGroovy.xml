<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>XWiki</web>
<name>RightsGroovy</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.LudovicDubost</creator>
<author>XWiki.superadmin</author>
<customClass></customClass>
<contentAuthor>XWiki.superadmin</contentAuthor>
<creationDate>1159729144000</creationDate>
<date>1159734904000</date>
<contentUpdateDate>1203116888000</contentUpdateDate>
<version>1.9</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<content>import com.xpn.xwiki.api.*;
import com.xpn.xwiki.web.*;
import java.util.*;
import java.lang.reflect.*;

public class RightsManager {
 def msgmap = []; 

public Context context
public XWikiRequest request
public XWiki xwiki;
public String message = "";
def xmsgmap;


 public void setMessageMap(msg) {
   xmsgmap = msg;
 }

 public String getMessage(msgid) {
   def msg2 = (xmsgmap==null) ? null : xmsgmap.get("nc_" + msgid)
   if ((msg2==null)||(msg2=="nc_" + msgid)) {
    def msg3 = msgmap.get(msgid)
    if (msg3==null)
     return msgid
    else
     return msg3
   }
   else
    return msg2 
 }

 public String getMessage() {
   return getMessage(message)
 }

public void setContext(ct) {
 context = ct;
}

public void setRequest(req) {
 request = req;
}

public void setXWiki(xwi) {
 xwiki = xwi;
}


  public Vector getRightsObjects(String page, int type) {
     String fpage;
     if (type==0)
       fpage = "XWiki.XWikiPreferences"
     else if (type==1)
       fpage = "${page}.WebPreferences"
     else 
       fpage = "${page}"
     Document rdoc = xwiki.getDocument(fpage);
     if (type==2)
       return (rdoc==null) ? null : rdoc.getObjects("XWiki.XWikiRights")
     else
       return (rdoc==null) ? null : rdoc.getObjects("XWiki.XWikiGlobalRights")
  }

  public List getRightsFromObjects(String userorgroup, boolean isuser, java.util.Vector robjects) {
     def allowed =  new ArrayList()
     for (robj in robjects) {
         List members;
         if (isuser)
            members = Arrays.asList(robj.users.split(" |,"))
         else 
            members = Arrays.asList(robj.groups.split(" |,"))
         
         if (members.contains(userorgroup))
          allowed.addAll(Arrays.asList(robj.levels.split(" |,")))
     }    
     return allowed;
  }

  public getRights(String userorgroup, boolean isuser, String page, int type) {
     return getRightsFromObjects(userorgroup, isuser, getRightsObjects(page, type));
  }

  public getSimpleRights(String page, int type) {
     def list = new ArrayList();
     def rights = getRightsObjects(page, type);
  }

  public List getSpaces() {
    return xwiki.getSpaces()
  }

public boolean updateRights(String prefix, String right, Object obj) {
    String field_name
    if (prefix=="")
      field_name = right 
    else
      field_name = "${prefix}_${right}"
  
    if (right=="admin") {
      obj.set("users", new String(""))
      obj.set("groups", new String("XWiki.AdminGroup"))
      obj.set("levels", new String(right))
      obj.set("allow", new String("1"))
    }
    else {
    String value = request.get(field_name);
    if (value=="inherited") {
      obj.set("users", new String(""))
      obj.set("groups", new String(""))
      obj.set("levels", new String(""))
      obj.set("allow", new String("1"))
    } else if (value=="public") {
      obj.set("users", new String("XWiki.XWikiGuest"))
      obj.set("groups", new String("XWiki.XWikiAllGroup"))
      obj.set("levels", new String(right))
      obj.set("allow", new String("1"))
    } else if (value=="members") {
      obj.set("users", new String(""))
      obj.set("groups", new String("XWiki.XWikiAllGroup"))
      obj.set("levels", new String(right))
      obj.set("allow", new String("1"))
    } else if (value=="projectmembers") {
      obj.set("users", new String(""))
      obj.set("groups", new String("XWiki.ProjectGroup"))
      obj.set("levels", new String(right))
      obj.set("allow", new String("1"))
    } else {
      obj.set("users", new String(""))
      obj.set("groups", new String("XWiki.AdminGroup"))
      obj.set("levels", new String(right))
      obj.set("allow", new String("1"))
    }
    }
    return true;
  }


  public String getRightsPage(String space) {
     if (space=="")
       return "XWiki.XWikiPreferences"
     else
       return "${space}.WebPreferences"
  }

  public boolean updateRights(String space) {
    Document doc = new Document(xwiki.xWiki.getDocument(getRightsPage(space),context.context),context.context)
    if ((doc!=null)&amp;&amp;(!doc.isNew())) {
     for (obj in doc.getObjects("XWiki.XWikiGlobalRights")) { 
       doc.removeObject(obj)
     }
    doc.saveWithProgrammingRights()
    }
    boolean update = false;
    if (doc!=null) {
    update |= updateRights(space, "view", doc.newObject("XWiki.XWikiGlobalRights"))
    update |= updateRights(space, "edit", doc.newObject("XWiki.XWikiGlobalRights"))
    update |= updateRights(space, "comment", doc.newObject("XWiki.XWikiGlobalRights"))
    if (space=="") {
     update |= updateRights(space, "admin", doc.newObject("XWiki.XWikiGlobalRights"))
    }
    } else
     return false;
    if (update)
     doc.saveWithProgrammingRights() 
     return true;   
  }

  public updatePageRights(String page) {
    Document doc = new Document(xwiki.xWiki.getDocument(page,context.context),context.context)
    if ((doc!=null)&amp;&amp;(!doc.isNew())) {
     for (obj in doc.getObjects("XWiki.XWikiRights")) { 
       doc.removeObject(obj)
     }
    doc.saveWithProgrammingRights()
    }
    boolean update = false;
    if (doc!=null) {
    update |= updateRights("", "view", doc.newObject("XWiki.XWikiRights"))
    update |= updateRights("", "edit", doc.newObject("XWiki.XWikiRights"))
    update |= updateRights("", "comment", doc.newObject("XWiki.XWikiRights"))
    }   
    if (update)
     doc.saveWithProgrammingRights() 
    return true;
  }

  public updateRights() {
      if (updateRights("")==false)
        message += "Failed updated XWiki rights.\n"; 
  
      for (space in xwiki.getSpaces()) {
       if (updateRights(space)==false)
        message += "Failed updated rights for space ${space}.\n"; 
      }
   if ((message==null)||(message=="")) 
    return true;
   else
    return false; 
 }
}</content>
</xwikidoc>
