<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>XWiki</web>
<name>RegisterGroovy</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.LudovicDubost</creator>
<author>XWiki.dward</author>
<customClass></customClass>
<contentAuthor>XWiki.dward</contentAuthor>
<creationDate>1163115457000</creationDate>
<date>1186692696000</date>
<contentUpdateDate>1186692696000</contentUpdateDate>
<version>1.27</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Change account_notvalid message to state using no spaces or special characters</comment>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.RegisterGroovy</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>/* Groovy Class [View Code&gt;$doc.fullName?viewer=code] #* */

import com.xpn.xwiki.api.Document;

public class register {
 def msgmap = [ "email_notvalid": "This email is not valid", 
"account_already_exists": "This account already exists", "empty_password": "You have not entered a password", "unmatched_password" : "The passwords are not matching", "account_notvalid" : "This community name is invalid. Please enter a name without spaces or special characters.", "validation_failed" : "Some fields are incorrectly completed"];

 def xmsgmap;
 def xwiki;
 def context;
 def message = "";
 def firstname = "";
 def lastname = "";
 def account = "";
 def email = "";
 def password = "";

 public void setObjects(xwiki, context, msg) {
   setXWiki(xwiki)
   setContext(context)
   setMessageMap(msg)
 } 

 public void setMessageMap(msg) {
   xmsgmap = msg;
 }

 public void setXWiki(xwiki) {
   this.xwiki = xwiki;
 }

 public void setContext(context) {
   this.context = context;
 }

 public String getMessage(msgid) {
   def msg2 = xmsgmap.get("curriki_" + msgid)
   if ((msg2==null)||(msg2=="curriki_" + msgid)) {
    def msg3 = msgmap.get(msgid)
    if (msg3==null)
     return msgid
    else
     return msg3
   }
   else
    return msg2 
 }

 public String getMessage() {
   return getMessage(message)
 }

 public String getMessageCode() {
   return message
 }

 public boolean isValidPassword(request) {
   def password = request.get("XWiki.XWikiUsers_0_password");
   def password2 = request.get("2XWiki.XWikiUsers_0_password");

   if ((password==null)||(password.equals(""))) {
    message = "empty_password";
    return false;
   }
   
   if ((password2==null)||(!password.equals(password2))) {
    message =  "unmatched_password";
    return false;
   }
   
   return true;
 }

 public boolean isValidAccount(account) {
   if (!account.equals("") &amp;&amp; account.replaceAll("[a-zA-Z0-9]","").equals("")) {
    if (xwiki.exists("XWiki.${account}")) {
     message = "account_already_exists";
     return false;
    }
    else {
     return true;
    }
   }
   else {
    message = "account_notvalid";
    return false;
   }
 } 

 public Document getUserDocument(request, generatePassword) {
   def account = request.get("xwikiname")

   if (!isValidAccount(account))
    return null;

   if (!generatePassword) {
    if (!isValidPassword(request))
     return null;
   }
   
   def userdoc = new Document(xwiki.xWiki.getDocument("XWiki.${account}", context.context), context.context)
   userdoc.addObjectFromRequest("XWiki.XWikiUsers")
   def userobj = userdoc.getObject("XWiki.XWikiUsers")

   if (generatePassword) {
     def password = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(8);
     userobj.set("password", password);
   }  

   userobj.set("active", "1")
   userdoc.setContent('#include' + 'Form("XWiki.XWikiUserSheet")')
   def rightobj = userdoc.newObject("XWiki.XWikiRights")
   rightobj.set("users", new String("${account}"))
   rightobj.set("allow", new String("1"))
   rightobj.set("levels", new String("edit"))
   rightobj.set("groups", new String(""))
   return userdoc;
 }

 public boolean isChecked(request) {
   def checkedterms = request.get("okterms")
   if ((checkedterms==null) || (checkedterms!="1")) {
     message = "checked_notterms";
     return false;
   }
   return true;
 } 

 public boolean createAccount(request) {
   return createAccount(request, false);
 }

 public boolean createAccount(request, generatePassword) {
   def userdoc = getUserDocument(request, generatePassword);
   if (userdoc==null)
    return false;
   if (userdoc.validate()) {
    userdoc.saveWithProgrammingRights();
    xwiki.addToAllGroup(request.xwikiname);
    if (true || generatePassword) {
     xwiki.sendConfirmationMail(userdoc.name, password, request.get("XWiki.XWikiUsers_0_email"), "confirmation_email_content");
    }
    return true; 
   }
   message = "validation_failed";
   return false;
 }
}
/* *# */
</content></xwikidoc>