<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>CreateResources</web>
<name>WebQuest</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.panjl</creator>
<author>XWiki.panjl</author>
<customClass></customClass>
<contentAuthor>XWiki.panjl</contentAuthor>
<creationDate>1231836370000</creationDate>
<date>1237209506000</date>
<contentUpdateDate>1237209506000</contentUpdateDate>
<version>14.1</version>
<title>WebQuest Form</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>attach scroll</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>CreateResources.WebQuest</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>6480f01e-93b9-4b48-b37a-bd7e0d44c932</guid>
<property>
<tags/>
</property>
</object>
<content>## http://next.dev.curriki.org/xwiki/bin/edit/CreateResources/WebQuest
## by Niels P. Mayer ( http://nielsmayer.com )
## originally from http://next.dev.curriki.org/xwiki/bin/view/Groups/CreateNewGroup?viewer=code&amp;showlinenumbers=0&amp;language=en
## Attempting to emulate form in http://www.curriki.org/xwiki/bin/view/Project/Form+Templates?xpage=print&amp;language=en
##
## ---------- PREAMBLE, CHECK AUTHORIZATION ----------
##
##UNCOMMENT-TO-USE-LOCAL-STYLESHEET
## &lt;link rel="stylesheet" href="/xwiki/bin/view/CreateResources/styleCSLP?xpage=plain" type="text/css" /&gt;
##UNCOMMENT-TO-USE-LOCAL-STYLESHEET
##
####################################	If not login, show login information
#if( $context.user=="XWiki.XWikiGuest" )
  #set( $logredir = $xwiki.getRequestURL() )
  #set( $url = $xwiki.getURL("XWiki.XWikiLogin","login","xredirect=$logredir") )
  $msg.get("createresources.needaccount", [$url])
#else
####################################	If logined, show WebQuest page
  #includeMacros("CreateResources.StyledMacros")
  #set( $pageName   = $request.getParameter("pageName") )
  #set( $cameFrom   = $request.getParameter("cameFrom") )
  #set( $flow       = $request.getParameter("flow") )
  #set( $parentPage = $request.getParameter("parentPage") )
  #set( $publishSpace = $request.getParameter("publishSpace") )
    #set( $reqparas = $request.getParameterNames() )

  #if( "$!pageName" != "" ) 
	 #set( $newAsset  = $xwiki.curriki.fetchAsset($pageName) )
  #else
	 #set( $newAsset = $xwiki.curriki.createAsset($xwiki.null) )
  #end 

####################################	If newAsset is null, show error message
  #if( "$!newAsset"=="" ) 
	#if( "$!pageName" != "" )&lt;p&gt;asset creation error:&lt;/p&gt;#else&lt;p&gt;asset lookup error:&lt;/p&gt;#end
	&lt;dl&gt;
	  &lt;dt&gt;request.method&lt;/dt&gt;&lt;dd&gt;$!request.method&lt;/dd&gt;
	  &lt;dt&gt;request.page&lt;/dt&gt;&lt;dd&gt;$!request.page&lt;/dd&gt;
	  &lt;dt&gt;getParameter("pageName")&lt;/dt&gt;&lt;dd&gt;$!pageName&lt;/dd&gt;
	  &lt;dt&gt;getParameter("cameFrom")&lt;/dt&gt;&lt;dd&gt;$!cameFrom&lt;/dd&gt;
	  &lt;dt&gt;getParameter("flow")&lt;/dt&gt;&lt;dd&gt;$!flow&lt;/dd&gt;
	  &lt;dt&gt;getParameter("parentPage")&lt;/dt&gt;&lt;dd&gt;$!parentPage&lt;/dd&gt;
	  &lt;dt&gt;getParameter("publishSpace")&lt;/dt&gt;&lt;dd&gt;$!publishSpace&lt;/dd&gt;
	&lt;/dl&gt;
  #else
####################################	else ,show page
{pre}
&lt;script language="javascript" type="text/javascript"&gt;

function checkWebQuestForm() {
  var missed_fields_str = '';
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') == null) {
	missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.title')');
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') == null) {
	missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.description')');
  }
  {
	var form_fw_items = getFieldContentStr('CurrikiCode.AssetClass_0_fw_items');
	if ((form_fw_items == null) || (form_fw_items == 'FW_masterFramework.WebHome')) {
	  missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.subject')');
	}
  }
  { // Eductional-Level -- for validation, must look at "checked" on each button.
	var one_checked = false;
	for (var idx = 0, form_checkboxes = document.forms.inline['CurrikiCode.AssetClass_0_educational_level'];
	 ((idx &lt; form_checkboxes.length) &amp;&amp; !one_checked);
	 idx++) {
	  if (form_checkboxes[idx].checked) {
	one_checked = true;
	  }
	}
	if (!one_checked) {
	  missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.level')');
	} 
  }

  if (getWysiwygFieldContent('mce_editor_0', 'nlp_intro') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('wq.required.fields.dialog.introduction')');
  }

  if (getWysiwygFieldContent('mce_editor_1', 'nlp_task') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('wq.required.fields.dialog.task')');
  }

  if (getWysiwygFieldContent('mce_editor_2', 'nlp_process') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('wq.required.fields.dialog.process')');
  }

  if(!chekcTableText()){
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('wq.required.fields.dialog.evaluation')');
  }

  if (getWysiwygFieldContent('mce_editor_3', 'nlp_conclusion') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('wq.required.fields.dialog.conclusion')');
  }

  if (getFieldContentStr('CurrikiCode.AssetLicenseClass_0_rightsHolder') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.rights')');
  }
  if (getAttachmentsSize() &gt; $msg.get("wq.file.size.maximum")) {
	missed_fields_str = missed_fields_str + '\n\n' + '$msg.get('wq.file.size.oversize')';
  }
  var error_msg = "";
  if(missed_fields_str != ''){
	error_msg = '$msg.get('lesson.plan.required.fields.dialog')' + missed_fields_str;
  }else{
	if (getFieldContentStr('CurrikiCode.AssetClass_0_title').length &gt; 250) {
	  error_msg = '$msg.get("wq.title.more.250")';
	}
  }

  if (error_msg != '') { // since theres error messages, validation failed... bail out.
	alert(error_msg);
	setTextAssetToWikiText('$msg.get('form.done.wysiwyg.error.wikitext')');  // not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
	setSuccessMessage('');     //not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
	return false;
  }
  else {
	setTextAssetToWikiText(formatTextareasIntoWikiText());
	setSuccessMessage('$msg.get('form.done.created.lessonplan')');
	return true;
  }
}

function checkWebQuestDirty() {
  if (getAttachmentsSize() &gt; 0) {
	return true;
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') != null) {
	return true;
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') != null) {
	return true;
  }
  if (wysiwygIsDirty('mce_editor_0')) {
	return true;
  }
  if (wysiwygIsDirty('mce_editor_1')) {
	return true;
  }
  if (wysiwygIsDirty('mce_editor_2')) {
	return true;
  }
  if (wysiwygIsDirty('mce_editor_3')) {
	return true;
  }
  return false;
}

function wysiwygIsDirty(wysiwyg_id_str) {
    var wysiwyg_o = tinyMCE.getInstanceById(wysiwyg_id_str);
    return ((wysiwyg_o != null) &amp;&amp; wysiwyg_o.isDirty());
}

function formatTextareasIntoWikiText() { 			
    var slp_str = '';		// the string we concat into the TextAssetClass contents
  var title_markup_str = '*';
  var vert_break_str = '\\\\\n\n'
  {
    var form_introduction = getWysiwygFieldContent('mce_editor_0', 'nlp_intro');
    if (form_introduction != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.intro.title")' + title_markup_str +  vert_break_str + form_introduction;
    }
  } 

  {
    var form_task = getWysiwygFieldContent('mce_editor_1', 'nlp_task');
    if (form_task != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.task.title")' + title_markup_str +  vert_break_str + form_task;
    }
  } 

  {
    var form_process = getWysiwygFieldContent('mce_editor_2', 'nlp_process');
    if (form_process != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.process.title")' + title_markup_str +  vert_break_str + form_process;
    }
  } 

  {	//js table
	var form_table_text = getTableText();
	if (form_table_text != null) {
	  slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.eval.title")' + title_markup_str +  vert_break_str + form_table_text
	}
  } 

  {
    var form_conclusion = getWysiwygFieldContent('mce_editor_3', 'nlp_conclusion');
    if (form_conclusion != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.conclusion.title")' + title_markup_str +  vert_break_str + form_conclusion;
    }
  } 

  {
    var form_cred = getWysiwygFieldContent('mce_editor_4', 'nlp_cred');
    if (form_cred != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.cred.title")' + title_markup_str +  vert_break_str + form_cred;
    }
  }

  {
    var form_standards = getWysiwygFieldContent('mce_editor_5', 'nlp_standards');
    if (form_standards != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.standards.title")' + title_markup_str +  vert_break_str + form_standards;
    }
  } 

  {
	var file_list = getAttachmentsNames();
	if (file_list.length &gt; 0) {
	  slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("wq.required.attachments.title")' + title_markup_str + vert_break_str + '#' + 'currikiattachmentBegin()\n';
	  for (var idx = 0; (idx &lt; file_list.length); idx++) {
	// for macro currikiattachment($fname) see web/src/main/webapp/skins/curriki8/macros.vm
	slp_str = slp_str + '#' + 'currikiattachment("' + file_list[idx] + '")\n';
	  }
	  slp_str = slp_str + '#' + 'currikiattachmentEnd()\n' + vert_break_str;
	}
  }
  return (slp_str);
}

function setTextAssetToWikiText(str) {
  var input_field_TextAssetClass_o = $('CurrikiCode.TextAssetClass_0_text');
  if (input_field_TextAssetClass_o != null) {
	input_field_TextAssetClass_o.value = str;
  }
  else { alert('error in setTextAssetToWikiText()'); }
}

function getFieldContentStr(field_id_str) {
  var field_content_o   = $(field_id_str);
  var field_content_str = (field_content_o==null) ? "" : field_content_o.value;
  if ((field_content_str.length &lt; 1) || (field_content_str.trim() == '')) {
	return (null);
  }
  else {
	return (field_content_str);
  }
}

// get wysiwyg contents... returns null if no content, else string of
// wikitext.  if wysiwyg_id_str WYSIWYG is not created due to platform or
// browser issues, fallback to using values in textarea assoc'd with
// wysiwyg (in which case plaintext, not wikitext).
function getWysiwygFieldContent(wysiwyg_id_str, textarea_fallback_id_str) {
  var wysiwyg_content_o = tinyMCE.getInstanceById(wysiwyg_id_str); // WYSIWYG Associated with "Content"
  if (wysiwyg_content_o == null) { // no WYSIWYG--&gt;falback to textarea contents...
    var wysiwyg_content_txt  = $(textarea_fallback_id_str).value;
    if ((wysiwyg_content_txt.length &lt;= 1) || (wysiwyg_content_txt.trim() == '')) {
      return null;	   // --&gt; return signal for empty fallback textarea contents
    }
    else {
      return wysiwyg_content_txt; // return fallback textarea contents
    }
  }
  else if (!wysiwyg_content_o.isDirty()) { // WYSIWYG exists but empty...
    return null;		// --&gt; return signal for empty contents
  }
  else {			// WYSIWYG exists with content...
    return (tinyMCE.getContent(wysiwyg_id_str));
  }
}

function setSuccessMessage(str) {
  var input_field_successMessage_o = $('successMessage');
  if (input_field_successMessage_o != null) {
	input_field_successMessage_o.value = str;
  }
  else { alert('error in setSuccessMessage()'); }
}

function appendSeparatedErrorMessageStr(message_str, missed_field_err_str) {
  return(message_str + '\n\t\t' + missed_field_err_str);
}

var needUnloadDialog = false;
function clearUnloadDialog() {
  needUnloadDialog = false;
}

function onWindowUnloading(e) {
  // if the form is not "dirty" don't pop form.leaving.dialog
  if (needUnloadDialog &amp;&amp; checkWebQuestDirty()) {
	e.browserEvent.returnValue = "$msg.get('form.leaving.dialog')";
  }
}

function setUnloadDialog() {
  // window.onbeforeunload = unloadDialog;
  Ext.EventManager.on(window, 'beforeunload', onWindowUnloading); 
  needUnloadDialog = true;
}

function getAttachmentsSize() {
  return (window.frames['attachment_iframe'].getAttachmentsSize());
}

function getAttachmentsNames() {
  return (window.frames['attachment_iframe'].getAttachmentsNames());
}

function setAttachmentsIframeSize() {
  var iframe_o = document.getElementById('attachment_iframe');
  try {
	if (iframe_o != null &amp;&amp; !Ext.isIE6) {
	  iframe_o.height = iframe_o.style.height = 50;  // attempt reset because FF behavior is grow-only
	}
	// this is portable way of getting at iframe DOM content per
	// http://www.mabaloo.com/Web-Development/Creating-controlling-and-manipulating-an-Iframe-through-JavaScript.html
	var doc_o = (iframe_o.contentWindow || iframe_o.contentDocument);  
	if (doc_o.document) {
	  doc_o = doc_o.document;
	}
	// the iframe needs more space than 'scrollHeight' says, or we get
	// scrollbars. 5 seems to accomodate the inner and outer margin, and
	// inner and outer border, with one pixel for the margin itself.
	// nb: iframe_o.style.height only works in IE, does nothing in FF.
	// do em both for good measure?!
	if (iframe_o != null) {
	   if (Ext.isIE6) {
         iframe_o.height = doc_o.body.scrollHeight + 30;
	   } else {
	     iframe_o.height = iframe_o.style.height = doc_o.body.scrollHeight + 5;
	   }
	}
  } catch(e) {
	if (iframe_o != null) {
	  iframe_o.height = iframe_o.style.height = 300; // bigger default height value if things go wrong
	}
  } 
}
&lt;/script&gt;

&lt;style type="text/css"&gt;
body.p-CreateResources-WebQuest .x-grid3-header {background:#93c53c;}
body.p-CreateResources-WebQuest .x-grid3-header span img {margin: -4px 0 -4px 4px;}
body.p-CreateResources-WebQuest .x-grid3-scroller .x-grid3-row {border-color: #ccc; border-top:none;}
body.p-CreateResources-WebQuest .x-grid3-scroller {margin-bottom:5px;}
body.p-CreateResources-WebQuest input[type="button"] {font-weight:normal;}
.x-grid3-hd-0{text-align:center;}
.x-grid3-hd-1{text-align:center;}
.x-grid3-hd-2{text-align:center;}
.x-grid3-hd-3{text-align:center;}
.x-grid3-hd-4{text-align:center;}
.x-grid3-td-0{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
.x-grid3-td-1{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
.x-grid3-td-2{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
.x-grid3-td-3{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
.x-grid3-td-4{padding-left: 0px !important;padding-right: 0px !important}
.x-grid3-col-0{white-space: normal; word-wrap:break-word;}
.x-grid3-col-1{white-space: normal; word-wrap:break-word;}
.x-grid3-col-2{white-space: normal; word-wrap:break-word;}
.x-grid3-col-3{white-space: normal; word-wrap:break-word;}
.x-grid3-col-4{white-space: normal; word-wrap:break-word;}
.x-form-field-ace{overflow:hidden}

/* Curriki-form */
.curriki-form1 .headerbar { background-color: #93c53c; }
.curriki-form1 .headerbar { padding-left: 0.95em; }
.curriki-form1 em { font-style:normal; color: #fb0f0c; }
.curriki-form1 .header p { padding: 0 0 1em; }
.curriki-form1 .header p img { margin-bottom: -8px; height: 25px; width: 25px; }
.curriki-form1 .frame{ margin-bottom: 2em; }
.curriki-form1 .frame-content { padding: 0.5em 1em 1.5em; }
.curriki-form1 h3 { padding-top: 1em; }
.curriki-form1 .medium { width: 75%; }
.curriki-form1 .small { font-size: 100%; width: 50%; }
.curriki-form1 .entry { padding: 2em 0 0; }
.curriki-form1 .entry h5 { font-size: 1.1em; }
.curriki-form1 .entry h5 em { font-weight: normal; }
.curriki-form1 .entry h5 img { margin-bottom: -5px; }
.curriki-form1 .entry p.instruction { line-height: 130%; padding-bottom: 7px; }
.curriki-form1 .entry input.input { width: 90%; }
.curriki-form1 .entry textarea { height: 9em; width: 90%; }

.curriki-form1 .entry label { display: block; }
.curriki-form1 table.subject-educational { font-size: 1em; width: 95%; }
.curriki-form1 table.subject-educational td { width: 50%; padding-right: 1em; }
.curriki-form1 table.subject-educational td td { width: auto; }
.curriki-form1 .links { padding-bottom: 0; text-align: center; }
.curriki-form1 .links button { display: inline; margin-right: 1.5em; }
.curriki-form1 table.subject-educational th { background-color: transparent; }
.curriki-form1 table.subject-educational td { vertical-align: top; }
.curriki-form1 span.xwiki-form-listclass { display: block; margin: 3px 0 !important; margin: 0 0 2px; }
.curriki-form1 #XWiki\.AssetClass_0_title { width: 99% !important; width: 95%; }
.curriki-form1 textarea { height: 120px; }
.curriki-form1 textarea { padding: 1px 0; }
.curriki-form1 .mceEditorIframe { height: 18em !important; width: 100%  !important; }
.curriki-form1 .subject-educational .xwiki-form-listclass { padding-bottom: 1px !important; padding-bottom: 0; }
.curriki-form1 .subject-educational .ygtvlabel { display: block; padding-top: 4px; }
.curriki-form1 #attachment_iframe { padding: 10px; width: 100%; }

.curriki-form1_textarea { width: 99.5% !important; width: 95%; }
input {	width:expression(this.type=="text" ? "83%" : "style"); }
&lt;/style&gt;
&lt;script type="text/javascript" src="/xwiki/yui/yahoo/yahoo-min.js" &gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/xwiki/yui/treeview/treeview-min.js" &gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/xwiki/yui/treeview/checknode.js"&gt;&lt;/script&gt;
&lt;script&gt; 
// ----------------------------------- override YUI checknode method -------------------
/**
 * jsj add
 *Invoked when the user press space key
 */
YAHOO.widget.CheckNode.prototype.getKeyCheck = function() {
    return " if( 32 == (window.event ? event.keyCode : event.which) ){ "+"YAHOO.widget.TreeView.getNode(\'" + this.tree.id + "\'," +
        this.index + ").checkClick();"+"if (event.preventDefault) event.preventDefault( ); else event.returnValue = false;}";
};

// Overrides YAHOO.widget.TextNode
YAHOO.widget.CheckNode.prototype.getNodeHtml = function() {
    // this.logger.log("Generating html");
    var sb = new Array();

    sb[sb.length] = '&lt;table border="0" cellpadding="0" cellspacing="0"&gt;';
    sb[sb.length] = '&lt;tr&gt;';

    for (i=0;i&lt;this.depth;++i) {
        sb[sb.length] = '&lt;td class="' + this.getDepthStyle(i) + '"&gt;&amp;#160;&lt;/td&gt;';
    }

    sb[sb.length] = '&lt;td';
    sb[sb.length] = ' id="' + this.getToggleElId() + '"';
    sb[sb.length] = ' class="' + this.getStyle() + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onclick="javascript:' + this.getToggleLink() + '"&gt;&amp;#160;';
    sb[sb.length] = '&lt;/td&gt;';

    // check box
    sb[sb.length] = '&lt;td';
    sb[sb.length] = ' id="' + this.getCheckElId() + '"';
    sb[sb.length] = ' class="' + this.getCheckStyle() + '"';
    sb[sb.length] = ' onclick="javascript:' + this.getCheckLink() + '"&gt;';
    sb[sb.length] = '&amp;#160;&lt;/td&gt;';


    sb[sb.length] = '&lt;td&gt;';
    sb[sb.length] = '&lt;a';
    sb[sb.length] = ' id="' + this.labelElId + '"';
    sb[sb.length] = ' class="' + this.labelStyle + '"';
    sb[sb.length] = ' href="' + this.href + '"';
    sb[sb.length] = ' target="' + this.target + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onkeypress="javascript:' + this.getKeyCheck(this.event)+'"&gt;';
    //sb[sb.length] = '&gt;';
    sb[sb.length] = this.label;
    sb[sb.length] = '&lt;/a&gt;';
    sb[sb.length] = '&lt;/td&gt;';
    sb[sb.length] = '&lt;/tr&gt;';
    sb[sb.length] = '&lt;/table&gt;';

    return sb.join("");
};

var grid;                      // table
var isJumpToNext, isJumpToPre; // jump flag for table
var clickTabToNextNum=0, clickTabToPreNum=0, clickTabInGridToNextNum=0, clickTabInGridToPreNum=0; 
// ------------------------------------ extend extjs ------------------------------------
Ext.apply(Ext.grid.GridView.prototype,{
	// remove red triangles
	doRender : function(cs, rs, ds, startRow, colCount, stripe){

		var ts = this.templates, ct = ts.cell, rt = ts.row, last = colCount-1;
		var tstyle = 'width:'+this.getTotalWidth()+';';
		var buf = [], cb, c, p = {}, rp = {tstyle: tstyle}, r;
		for(var j = 0, len = rs.length; j &lt; len; j++){
			r = rs[j]; cb = [];
			var rowIndex = (j+startRow);
			for(var i = 0; i &lt; colCount; i++){
				c = cs[i];
				p.id = c.id;
				p.css = i == 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
				p.attr = p.cellAttr = "";
				p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
				p.style = c.style;
				if(p.value == undefined || p.value === "") p.value = "&amp;#160;";
				cb[cb.length] = ct.apply(p);
			}
			var alt = [];
			if(stripe &amp;&amp; ((rowIndex+1) % 2 == 0)){
				alt[0] = "x-grid3-row-alt";
			}
			if(r.dirty){
				alt[1] = " x-grid3-dirty-row";
			}
			rp.cols = colCount;
			if(this.getRowClass){
				alt[2] = this.getRowClass(r, rowIndex, rp, ds);
			}
			rp.alt = alt.join(" ");
			rp.cells = cb.join("");
			buf[buf.length] =  rt.apply(rp);
		}
		return buf.join("");
	},
	
	focusCell : function(row, col, hscroll){
		row = Math.min(row, Math.max(0, this.getRows().length-1));
		var xy = this.ensureVisible(row, col, hscroll);
		this.focusEl.setXY(xy||this.scroller.getXY());
		
		if(Ext.isGecko){
		   // this.focusEl.focus();
		}else{
		   // this.focusEl.focus.defer(1, this.focusEl);
		}
	},

	// private
	layout : function(){
		if(!this.mainBody){
			return; // not rendered
		}
		var g = this.grid;
		var c = g.getGridEl();
		var csize = c.getSize(true);
		var vw = csize.width;

		if(vw &lt; 20 || csize.height &lt; 20){ // display: none?
			return;
		}

		if(g.autoHeight){
			this.scroller.dom.style.overflow = 'hidden';
		}else{
			this.el.setSize(csize.width, csize.height);

			var hdHeight = this.mainHd.getHeight();
			var vh = csize.height - (hdHeight);

			this.scroller.setSize(vw, vh);
			if(this.innerHd){
				this.innerHd.style.width = (vw)+'px';
			}
		}
		if(this.forceFit){
			if(this.lastViewWidth != vw){
				this.fitColumns(false, false);

				this.lastViewWidth = vw;
			}
		}else {
			this.autoExpand();
			this.syncHeaderScroll();
		}
		this.onLayout(vw, vh);
	}
});
Ext.apply(Ext.grid.EditorGridPanel.prototype,{
	// multi-lines wrapper and clear default value
	preEditValue : function(r, field){
		var value = r.data[field];
		if(!r.dirty||(r.dirty &amp;&amp; typeof r.modified[field] == 'undefined')){
			value='';
		}else if(typeof value == 'string'){
			value=value.replace(/&lt;br\/&gt;/gi,'\r\n');
			value=this.autoEncode ? Ext.util.Format.htmlDecode(value) : value;
		}
		return value;
	},
	postEditValue : function(value, originalValue, r, field){
		if(typeof value == 'string'){
			value=this.autoEncode ? Ext.util.Format.htmlEncode(value) : value;
			value=value.replace(/\r\n/gi,"&lt;br/&gt;").replace(/\n/gi,'&lt;br/&gt;');
		}
		delete Ext.currentCellNode;
		return value;
	}
});
Ext.apply(Ext.grid.GridEditor.prototype, {
	// set auto size
	autoSize: true,
	doAutoSize : function(){
		if(this.autoSize){
			var parentNode=this.boundEl.dom.parentNode;
			var width=parentNode.clientWidth;
			var height=parentNode.clientHeight;
			switch(this.autoSize){
				case "width":
					this.setSize(width,  "");
				break;
				case "height":
					this.setSize("",  height-1);
				break;
				default:
					this.setSize(width,  height-1);
			}
			Ext.currentCellNode=parentNode;
		}
	}
});
Ext.apply(Ext.form.TextArea.prototype, {
	// auto size cell
	onKeyUpBuffered : function(e){
		if(!e.isNavKeyPress()||e.getKey()==e.ENTER){
			this.autoSize();
		} else if (e.isNavKeyPress()) {		
			if (isJumpToNext) {
				clickTabToNextNum = clickTabToNextNum + 1;
				if (clickTabToNextNum == 2) {
					isJumpToNext = false;
					clickTabToNextNum = 0;
					document.getElementById("addRowBtn").focus();
				}
			} else if (isJumpToPre) {
				clickTabToPreNum = clickTabToPreNum + 1;
				if (clickTabToPreNum == 2) {
					isJumpToPre = false;

					clickTabToPreNum = 0;
					tinyMCE.execCommand('mceFocus',false,'mce_editor_2');
				}
			}
		} 
	},
	autoSize : function(){
		if(!this.grow || !this.textSizeEl){
			return;
		}
		var el = this.el;
		var v = el.dom.value;
		var ts = this.textSizeEl;
		ts.innerHTML = '';
		ts.appendChild(document.createTextNode(v));
		v = ts.innerHTML;
		Ext.fly(ts).setWidth(this.el.getWidth());
		if(v.length &lt; 1){
			v = "&amp;#160;&amp;#160;";
		}else{
			if(Ext.isIE){
				v = v.replace(/\n/g, '&lt;p&gt;&amp;#160;&lt;/p&gt;');
			}
			v += this.growAppend;
		}
		ts.innerHTML = v;
		var h = Math.min(this.growMax, Math.max(ts.offsetHeight, this.growMin)+this.growPad);
		if(h != this.lastHeight){
			if(Ext.currentCellNode){
				if(h&gt;Ext.currentCellNode.clientHeight){
					this.lastHeight = h;
					this.el.setHeight(h);
					this.fireEvent("autosize", this, h);
					if(Ext.isIE){
						Ext.currentCellNode.style.height=h;
					}else{
						Ext.currentCellNode.setStyle('height:'+h+'px');

					}
				}
			}else{
				this.lastHeight = h;
				this.el.setHeight(h);
				this.fireEvent("autosize", this, h);
			}
		}
	}
});

// ------------------------------------ wzToolTip tt_Init ------------------------------------
function tt_Init2(){
	if(!(tt_op || tt_n4 || tt_n6 || tt_ie || tt_w3c)) return;
	var htm = tt_n4? '&lt;div style="position:absolute;"&gt;&lt;/div&gt;' : '', tags, t_tj, over, esc = 'return escape(';
	var i = tt_tags.length;
	while(i--){
		tags = tt_ie? (document.all.tags(tt_tags[i]) || 1)
			: document.getElementsByTagName? (document.getElementsByTagName(tt_tags[i]) || 1)
			: (!tt_n4 &amp;&amp; tt_tags[i]=="a")? document.links
			: 1;
		if(tt_n4 &amp;&amp; (tt_tags[i] == "a" || tt_tags[i] == "layer")) tags = tt_N4Tags(tt_tags[i]);
		var j = tags.length;
		while(j--){
			if(typeof (t_tj = tags[j]).onmouseover == "function" &amp;&amp; t_tj.onmouseover.toString().indexOf(esc) != -1 &amp;&amp; !tt_n6 || tt_n6 &amp;&amp; (over = t_tj.getAttribute("onmouseover")) &amp;&amp; over.indexOf(esc) != -1){
				if(over) t_tj.onmouseover = new Function(over);
				var txt = unescape(t_tj.onmouseover());
				htm += tt_Htm(
					t_tj,
					"tOoLtIp"+i+""+j,
					txt.wzReplace("&amp; ","&amp;")
				);
				t_tj.onmouseover = new Function('e',
					'tt_Show(e,'+
					'"tOoLtIp' +i+''+j+ '",'+
					((typeof t_tj.T_ABOVE != tt_u)? t_tj.T_ABOVE : ttAbove)+','+
					((typeof t_tj.T_DELAY != tt_u)? t_tj.T_DELAY : ttDelay)+','+
					((typeof t_tj.T_FIX != tt_u)? '"'+t_tj.T_FIX+'"' : '""')+','+
					((typeof t_tj.T_LEFT != tt_u)? t_tj.T_LEFT : ttLeft)+','+
					((typeof t_tj.T_OFFSETX != tt_u)? t_tj.T_OFFSETX : ttOffsetX)+','+
					((typeof t_tj.T_OFFSETY != tt_u)? t_tj.T_OFFSETY : ttOffsetY)+','+
					((typeof t_tj.T_STATIC != tt_u)? t_tj.T_STATIC : ttStatic)+','+
					((typeof t_tj.T_STICKY != tt_u)? t_tj.T_STICKY : ttSticky)+','+
					((typeof t_tj.T_TEMP != tt_u)? t_tj.T_TEMP : ttTemp)+
					');'
				);
				t_tj.onmouseout = tt_Hide;
				if(t_tj.alt) t_tj.alt = "";
				if(t_tj.title) t_tj.title = "";
			}
		}
	}
	Element.insert("tooltip_div",{bottom:htm});
	if(document.getElementById) tt_ifrm = document.getElementById("TTiEiFrM");
}

// ------------------------------------ edit grid definition ------------------------------------

var data01 = "$msg.get('wq.evaluation.row2.col2_sample')";
var data02 = "$msg.get('wq.evaluation.row2.col3_sample')";
var data03 = "$msg.get('wq.evaluation.row2.col4_sample')";
var data04 = "$msg.get('wq.evaluation.row2.col5_sample')";

var data00 = "$msg.get('wq.evaluation.row2.col1_sample')";
var data10 = "$msg.get('wq.evaluation.row3.col1_sample')";
var data20 = "$msg.get('wq.evaluation.row4.col1_sample')";
var data30 = "$msg.get('wq.evaluation.row5.col1_sample')";

var data=[
    {id:1,col1:data00,Beginning:data01,Developing:data02,Accomplished:data03,Exemplary:data04},
    {id:1,col1:data10,Beginning:"",Developing:"",Accomplished:"",Exemplary:""},
    {id:1,col1:data20,Beginning:"",Developing:"",Accomplished:"",Exemplary:""},
    {id:1,col1:data30,Beginning:"",Developing:"",Accomplished:"",Exemplary:""}
];

var store=new Ext.data.JsonStore({
    data:data,
    fields:["id","col1","Beginning","Developing","Accomplished","Exemplary"]
    }); 
#set($info_img = '/xwiki/skins/curriki8/icons/exclamation.png')
##var tooltip1="&lt;span class=\"tooltip-generator\"&gt;&lt;span class=\"tooltip_span\" onmouseover=\"this.WIDTH='300'; return escape('$msg.get("ace.lesson.plan.procedures.time.tooltip")');\"&gt;&lt;img src='/xwiki/skins/curriki8/icons/exclamation.png' id='tooltip-image-instruction' class='tooltip-image'/&gt;&lt;/span&gt;&lt;/span&gt;";
##var tooltip2="&lt;span class=\"tooltip-generator\"&gt;&lt;span class=\"tooltip_span\" onmouseover=\"this.WIDTH='300'; return escape('$msg.get("ace.lesson.plan.procedures.learningtask.tooltip")');\"&gt;&lt;img src='/xwiki/skins/curriki8/icons/exclamation.png' id='tooltip-image-instruction' class='tooltip-image'/&gt;&lt;/span&gt;&lt;/span&gt;";
##var tooltip3="&lt;span class=\"tooltip-generator\"&gt;&lt;span class=\"tooltip_span\" onmouseover=\"this.WIDTH='300'; return escape('$msg.get("ace.lesson.plan.procedures.methods.tooltip")');\"&gt;&lt;img src='/xwiki/skins/curriki8/icons/exclamation.png' id='tooltip-image-instruction' class='tooltip-image'/&gt;&lt;/span&gt;&lt;/span&gt;";

var colM = new Ext.grid.ColumnModel([
		{id:"0",header:" ",dataIndex:"col1",sortable:false,fixed:true,width:120,menuDisabled:true,editor:new Ext.form.TextArea({grow:true,fieldClass:'x-form-field-ace'})},
		{id:"1",header:"Beginning",dataIndex:"Beginning",sortable:false,fixed:true,width:110,menuDisabled:true,editor:new Ext.form.TextArea({grow:true,fieldClass:'x-form-field-ace'})},
		{id:"2",header:"Developing",dataIndex:"Developing",sortable:false,fixed:true,width:120,menuDisabled:true,editor:new Ext.form.TextArea({grow:true,fieldClass:'x-form-field-ace'})},
		{id:"3",header:"Accomplished",dataIndex:"Accomplished",sortable:false,fixed:true,width:120,menuDisabled:true,editor:new Ext.form.TextArea({grow:true,fieldClass:'x-form-field-ace'})},
		{id:"4",header:"Exemplary",dataIndex:"Exemplary",sortable:false,fixed:true,menuDisabled:true,editor:new Ext.form.TextArea({grow:true,fieldClass:'x-form-field-ace'})}
	]);

function fn() { 
	grid = new Ext.grid.EditorGridPanel({
	renderTo:"evaluation_div",
	title:"",
	height:200,
	width:570, 
	cm:colM,
	store:store,
	autoExpandColumn:4,
	clicksToEdit:1,
	autoHeight:true,
	autoEncode:true,
	cls :' x-form-field-ace;',
	viewConfig: {scrollOffset: 2},
	fitContainer: true
	});

	grid.on("cellclick", this.cellClick);
	grid.on("afteredit",this.afterEdit,this);
	grid.addListener("keyDown", function(e){
		if (e.isNavKeyPress()) {		
			if (isJumpToNext) {
				clickTabInGridToNextNum = clickTabInGridToNextNum + 1;
				if (clickTabInGridToNextNum == 2) {
				    isJumpToNext = false;
					clickTabInGridToNextNum = 0;
					document.getElementById("addRowBtn").focus();
				}
			} else if (isJumpToPre) {
				clickTabInGridToPreNum = clickTabInGridToPreNum + 1;
				if (clickTabInGridToPreNum == 2) {
					isJumpToPre = false;
					clickTabInGridToPreNum = 0;
					tinyMCE.execCommand('mceFocus',false,'mce_editor_2');
				}
			}
		} 
	});

	grid.getSelectionModel().on("cellselect", function(sel, row, col) {
		curRow = row;curCol = col;
		if (row !=0 &amp;&amp; col !=0 &amp;&amp; row == grid.getStore().getCount()-1 &amp;&amp; col == grid.getColumnModel().getColumnCount()-1) {
			isJumpToNext = true;
		} else {
			isJumpToNext = false;
		}
		if (row == 0 &amp;&amp; col == 0) {
			isJumpToPre = true;
		} else {
			isJumpToPre = false;
		}
	});
	//tt_Init2();
}

Ext.onReady(fn); 

function cellClick(obj, row, col, e){

	var record = obj.store.getAt(row);
	if(row == 0 &amp;&amp; col == 0){
		if(record.get("col1") == data00)
			record.set("col1", "");
	}else if(row == 1 &amp;&amp; col == 0){
		if(record.get("col1") == data10)
			record.set("col1", "");
	}else if(row == 2 &amp;&amp; col == 0){
		if(record.get("col1") == data20)
			record.set("col1", "");
	}else if(row == 3 &amp;&amp; col == 0){
		if(record.get("col1") == data30)
			record.set("col1", "");
	}else if(row == 0 &amp;&amp; col == 1){
		if(record.get("Beginning") == data01)
			record.set("Beginning", "");
	}else if(row == 0 &amp;&amp; col == 2){
		if(record.get("Developing") == data02)
			record.set("Developing", "");
	}else if(row == 0 &amp;&amp; col == 3){
		if(record.get("Accomplished") == data03)
			record.set("Accomplished", "");
	}else if(row == 0 &amp;&amp; col == 4){
		if(record.get("Exemplary") == data04)
			record.set("Exemplary", "");
	}
	//store.commitChanges(); 
}

function afterEdit(obj, row, col, e){
	var r=obj.record;
	var id=r.get("id");
	var name=r.get("name");
	//store.commitChanges(); 
	//Ext.MessageBox.alert("alertdiv","Hello,easyjf open source"); 
}

// insert new row
function addrow(){
	data=[{id:1,col1:'',Beginning:'',Developing:'',Accomplished:'',Exemplary:''}];
	store.loadData(data, true);
	return false;
}

function chekcTableText(){
	
	var arr = store.data;
	for(i=0;i&lt;arr.length;i++){
		var record = store.getAt(i);
		if(record.get("col1") != "" || record.get("Beginning") != "" || record.get("Developing") != "" 
			|| record.get("Accomplished") != "" || record.get("Exemplary") != ""){
			return true;
		}
	}
	return false;
}	

function formatTableString(str){
	str = str.replace(/&lt;br\/&gt;/gi,'\r\n');
	str = Ext.util.Format.htmlDecode(str);
	str = formatString(str, /#/g, "&amp;#35;");
	str = formatString(str, /1/g, "&amp;#49;");
	str = formatString(str, /\*/g, "&amp;#42;");
	str = formatString(str, /a/g, "&amp;#97;");
	str = formatString(str, /A/g, "&amp;#65;");
	str = formatString(str, /i/g, "&amp;#105;");
	str = formatString(str, /I/g, "&amp;#73;");
	str = formatString(str, /g/g, "&amp;#103;");
	str = formatString(str, /h/g, "&amp;#104;");
	str = formatString(str, /k/g, "&amp;#107;");
	str = formatString(str, /_/g, "&amp;#95;");
	str = formatString(str, /~/g, "&amp;#126;");
	str = formatString(str, /-/g, "&amp;#45;");
	str = formatString(str, /{/g, "&amp;#123;");
	str = formatString(str, /}/g, "&amp;#125;");
	str = formatString(str, /\(/g, "&amp;#40;");
	str = formatString(str, /\)/g, "&amp;#41;");
	str = formatString(str, /\|/g, "&amp;#124;");
	str = formatString(str, /\$/g, "&amp;#36;");
	str = formatString(str, /@/g, "&amp;#64;");
	str = formatString(str, /\[/g, "&amp;#91;");
	str = formatString(str, /\]/g, "&amp;#93;");
	str = formatString(str, /&lt;/g, "&amp;#60;");
	str = formatString(str, /&gt;/g, "&amp;#62;");
	str = str.replace(/\r\n/gi,"\\\\")
	return str;
}
function formatString(str, reg, repls){
	return str.replace(reg, repls)
}	

function getTableText(){
	var str = '\{table\}';
	str += '&amp;#160; | Beginning | Developing | Accomplished | Exemplary\r\n';

	var arr = store.data;
	for(i=0;i&lt;arr.length;i++){
		var record = store.getAt(i);
		var col1 = record.get("col1");
		var beginning = record.get("Beginning");
		var developing = record.get("Developing");
		var accomplished = record.get("Accomplished");
		var exemplary = record.get("Exemplary");

		//if(col1 != "" || beginning != "" || developing != "" || accomplished!="" || exemplary!=""){
			col1 = formatTableString(col1);
			col1 = (col1 == "" ? "&amp;#160;" : col1);
			beginning = formatTableString(beginning);
			beginning = (beginning == "" ? "&amp;#160;" : beginning);
			developing = formatTableString(developing);
			developing = (developing == "" ? "&amp;#160;" : developing);
			accomplished = formatTableString(accomplished);
			accomplished = (accomplished == "" ? "&amp;#160;" : accomplished);
			exemplary = formatTableString(exemplary);
			exemplary = (exemplary == "" ? "&amp;#160;" : exemplary);
			str += col1 + ' | ' + beginning + ' | ' + developing + ' | ' + accomplished + ' | ' + exemplary + ' \r\n';
		//}
	}









	str += '\{table\}';

	return str;
}
&lt;/script&gt;
{/pre}

####################################	JS end , title
#set( $noDialogs = $request.getParameter("noDialogs") )  ## ?noDialogs=1 turns off add-path dialogs, for testing, or to enable "edit-again"

  &lt;div class="header" style="margin-left: 10px"&gt;
  #curriki_formtitle($msg.get("wq.plan.title"))
  $msg.get("wq.title.description") &lt;a href="$msg.get('wq.title.description.link1.url')" target="_blank"&gt;$msg.get("wq.title.description.link1")&lt;/a&gt;&lt;span class="separator"&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;&lt;a href="$msg.get('wq.title.description.link3.url')" target="_blank"&gt;$msg.get("wq.title.description.link3")&lt;/a&gt;&lt;span class="separator"&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;&lt;a href="$msg.get('wq.title.description.link2.url')" target="_blank"&gt;$msg.get("wq.title.description.link2")&lt;/a&gt;&lt;span class="separator"&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;&lt;a href="$msg.get('wq.title.description.link4.url')"&gt;&lt;img src="$msg.get('wq.title.description.link4.thumbnail')" align="middle"&gt;$msg.get("wq.title.description.link4")&lt;/a&gt;
  &lt;br /&gt;$msg.get("form.required.fields.instruction")
  &lt;/div&gt;

  &lt;form action="" class="curriki-form1" id="inline" method="post"&gt;
	  &lt;input type="hidden" name="xredirect" value="$xwiki.getFormEncoded($xwiki.getRequestURL())" /&gt;
	  ##sign validation result, default is validate not passed
	  &lt;input type="hidden"  name="CurrikiCode.TextAssetClass_0_text" id="CurrikiCode.TextAssetClass_0_text" value="$msg.get('form.done.wysiwyg.error.wikitext')" /&gt;
	  &lt;input type="hidden"  name="CurrikiCode.TextAssetClass_0_type" id="CurrikiCode.TextAssetClass_0_type" value="0" /&gt;
	  &lt;input type="hidden"  name="CurrikiCode.AssetClass_0_instructional_component2" id="CurrikiCode.AssetClass_0_instructional_component2" value="curriculum_lp" /&gt;
	  &lt;input type="hidden"  name="CurrikiCode.AssetClass_0_hidden_from_search" id="CurrikiCode.AssetClass_0_hidden_from_search" value="0" /&gt; 
	  &lt;input type="hidden"  name="CurrikiCode.AssetClass_0_category" id="CurrikiCode.AssetClass_0_category" value="text" /&gt; 
	  ## successMessage is null, validation not passed
	  &lt;input type="hidden" 	name="successMessage" id="successMessage" value=""      /&gt;
	  &lt;input type="hidden" 	name="page"		value="$!request.page"		/&gt;
	  &lt;input type="hidden"	name="pageName"		value="$!newAsset.fullName"	/&gt;
	  &lt;input type="hidden"	name="publishSpace"	value="$!publishSpace"		/&gt;
	  &lt;input type="hidden"	name="parentPage"	value="$!parentPage"		/&gt;
	  #if( "$!noDialogs"!="" )
		&lt;input type="hidden"	name="noDialogs"	value="$noDialogs"		/&gt;
	  #else                                   
		&lt;input type="hidden"	name="flow"		value="$!flow"			/&gt;
		&lt;input type="hidden"	name="createLessonURL"		value="$msg.get('wq.url')"	/&gt; ## for ICT
		&lt;input type="hidden"	name="cameFrom"  #if( "$!cameFrom"=="" ) value="$msg.get('wq.url')"  #else   value="$!cameFrom"   #end /&gt;
	  #end             
####################################	step1 
  #curriki_formpart_begin($msg.get("wq.step1.header"))
  #curriki_forminstructions($msg.get("wq.step1.instruction"))
  #curriki_formprompt($msg.get("wq.info.title_title"), $msg.get("wq.info.title_tooltip"), $msg.get("wq.info.title_txt"), true, "medium")
  ##$newAsset.display("title","edit")
  &lt;input type="text" id="CurrikiCode.AssetClass_0_title" name="CurrikiCode.AssetClass_0_title" /&gt;
  #curriki_formprompt($msg.get("wq.info.description_title"), $msg.get("wq.info.description_tooltip"), $msg.get("wq.info.description_txt"), true, "medium")
  $newAsset.display("description","edit")
  &lt;table class="subject-educational"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
  #curriki_formprompt($msg.get("sri.fw_items_title"), $msg.get("sri.fw_items_tooltip"), $msg.get("sri.fw_items_txt"), true, "")
  $newAsset.display("fw_items","edit")
  &lt;/td&gt;&lt;td&gt;
  #curriki_formprompt($msg.get("sri.educational_level_title"), $msg.get("sri.educational_level_tooltip"), $msg.get("sri.educational_level_txt"), true, "medium")
  $newAsset.display("educational_level","edit")
  &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; ##class="subject-educational"
  #curriki_formprompt($msg.get("sri.keywords_title"), $msg.get("sri.keywords_tooltip"), $msg.get("sri.keywords_txt"), false, "medium")
  $newAsset.display("keywords","edit")
  #curriki_formprompt($msg.get("sri.language_title"), $msg.get("sri.language_tooltip"), $msg.get("sri.language_txt"), false, "medium")
  $newAsset.display("language","edit")
  #curriki_formpart_end() 
####################################	step2
  #curriki_formpart_begin($msg.get("wq.step2.header")) ## {
  #curriki_forminstructions($msg.get("wq.step2.instruction"))

  ##Introduction:
  #curriki_formprompt($msg.get("wq.intro.title"), $msg.get("wq.intro.tooltip"), $msg.get("wq.intro.instruction"), true, "medium")
  &lt;textarea id="nlp_intro" name="nlp_intro"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ##The Task:
  #curriki_formprompt($msg.get("wq.task.title"), $msg.get("wq.task.tooltip"), $msg.get("wq.task.instruction"), true, "medium")
  &lt;textarea id="nlp_task" name="nlp_task"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ##The Process:
  #curriki_formprompt($msg.get("wq.process.title"), $msg.get("wq.process.tooltip"), $msg.get("wq.process.instruction"), true, "medium")
  &lt;textarea id="nlp_process" name="nlp_process"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ##Evaluation:
  #curriki_formprompt($msg.get("wq.eval.title"), $msg.get("wq.eval.tooltip"), $msg.get("wq.eval.instruction"), true, "medium")
  &lt;div id="evaluation_div"&gt; &lt;/div&gt;  &lt;button class="button button-orange" id="addRowBtn" onclick="return addrow();"&gt;$msg.get("ace.lesson.plan.procedures.addrow")&lt;/button&gt;

  ##Conclusion:
  #curriki_formprompt($msg.get("wq.conclusion.title"), $msg.get("wq.conclusion.tooltip"), $msg.get("wq.conclusion.instruction"), true, "medium")
  &lt;textarea id="nlp_conclusion" name="nlp_conclusion"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ##Credits &amp; References:
  #curriki_formprompt($msg.get("wq.cred.title"), $msg.get("wq.cred.tooltip"), $msg.get("wq.cred.instruction"), false, "medium")
  &lt;textarea id="nlp_cred" name="nlp_cred"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ##Standards:
  #curriki_formprompt($msg.get("wq.standards.title"), $msg.get("wq.standards.tooltip"), $msg.get("wq.standards.instruction"), false, "medium")
  &lt;textarea id="nlp_standards" name="nlp_standards"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG

  ## Required Resources (attachments) -- fileselection w/ buttons
  #curriki_formprompt($msg.get("wq.required.attachments.title"), $msg.get("wq.required.attachments.tooltip"), $msg.get("wq.required.attachments.instruction"), false, "")
&lt;iframe src="$newAsset.getURL("view", "xpage=lpattachments")"
		onload="try { setAttachmentsIframeSize(); } catch(e) { alert('iframe onload error: '+e+' ...'); return false; }"
		id="attachment_iframe" name="attachment_iframe" width="100%" scrolling="auto" marginheight="0" marginwidth="0"	frameborder="0" &gt;
  &lt;h2&gt;Sorry, your browser doesn't support iframes. Attachment Uploading functionality disabled.&lt;/h2&gt; 
&lt;/iframe&gt;
  #curriki_formpart_end() ## }
####################################	step3
  #curriki_formpart_begin($msg.get("form.scratch.step3.header")) 
  #curriki_forminstructions($msg.get("form.scratch.step3.instruction"))
  #curriki_formprompt($msg.get("sri.right_holder_title"), $msg.get("sri.right_holder_tooltip"), $msg.get("sri.right_holder_txt"), true, "medium")
  $newAsset.display("rightsHolder","edit")
  #curriki_formprompt($msg.get("sri.rights_title"), $msg.get("sri.rights_tooltip"), $msg.get("sri.rights_txt"), false, "medium")
  $newAsset.display("rights", "edit")
  #curriki_formprompt($msg.get("sri.license_type_title"), $msg.get("sri.license_type_tooltip"), $msg.get("sri.license_type_txt"), false, "medium")
  &lt;p&gt;&lt;label&gt;$msg.get("sri.license_type_heading")&lt;/label&gt;&lt;/p&gt;		
  $newAsset.display("licenseType","edit")
  #curriki_formpart_end() 
####################################	step4
  #curriki_formpart_begin($msg.get("form.scratch.step4.header")) 
  &lt;p&gt;&lt;label&gt;$msg.get("form.scratch.step4.instruction")&lt;/label&gt;&lt;/p&gt;
  &lt;p class="links"&gt;
	 &lt;button
	  onclick="try { if (document.forms.inline.onsubmit) document.forms.inline.onsubmit(); if (checkWebQuestForm()) { clearUnloadDialog(); startWaitingDialog(); document.forms.inline.action='$msg.get("form.done.url")'; document.forms.inline.submit(); } return false; } catch(e) { alert('$msg.get("form.scratch.submit.button") button onclick error: '+e+' ...'); return false; }"
	  &gt;$msg.get("form.scratch.submit.button")&lt;/button&gt;
	 #if( "$!cameFrom" != "" ) 
	   #set( $cancelURL = $cameFrom )
	 #else 
	   #set( $cancelURL = $xwiki.getURL("Main.WebHome") ) ## cameFrom not set means go to WebHome
	 #end 
	 &lt;button class="cancel"
	  onclick="try { clearUnloadDialog(); window.location.href='$cancelURL'; return false; } catch(e) { alert('$msg.get("form.scratch.cancel.button") button onclick error: '+e+' ...'); return false; }"
	  &gt;$msg.get("form.scratch.cancel.button")&lt;/button&gt;
  &lt;/p&gt;
  #curriki_formpart_end() 
#####################################################################
&lt;div class="tooltips"&gt;
    {pre} $xwiki.addTooltipJS() {/pre}
&lt;/div&gt;
&lt;/form&gt;
#set( $noWYSIWYG  = $request.getParameter("noWYSIWYG") ) ##For testing,etc, add parameter ?noWYSIWYG=1 to force WYSIWYG editors to not display, and use TEXTAREA instead
#if( "$!noWYSIWYG" == "" ) ## {
#curriki_wysiwyg_loader_preamble()
#if( "$!publishSpace"=="" )            ## {
 #set( $user = $context.user )
  #if( $user.startsWith("XWiki.") )    ## {
    #set( $shortname = $user.substring(6) )
  #else                                ## } {
    #set( $shortname = $user )
  #end                                 ## }
  #set( $wysi_publishSpace = "Coll_${shortname}" )
#else ## } {
  #set( $wysi_publishSpace = $publishSpace )
#end                                   ## }
#curriki_SLP_wysiwyg_loader_editor("nlp_intro", $newAsset, $wysi_publishSpace)        ## id="mce_editor_0"
#curriki_SLP_wysiwyg_loader_editor("nlp_task", $newAsset, $wysi_publishSpace)         ## id="mce_editor_1"
#curriki_SLP_wysiwyg_loader_editor("nlp_process", $newAsset, $wysi_publishSpace)      ## id="mce_editor_2"
#curriki_SLP_wysiwyg_loader_editor("nlp_conclusion", $newAsset, $wysi_publishSpace)   ## id="mce_editor_3"
#curriki_SLP_wysiwyg_loader_editor("nlp_cred", $newAsset, $wysi_publishSpace)         ## id="mce_editor_4"
#curriki_SLP_wysiwyg_loader_editor("nlp_standards", $newAsset, $wysi_publishSpace)    ## id="mce_editor_5"
#end ## } -- if "$!noWYSIWYG"==""
{pre}&lt;script language="javascript" type="text/javascript"&gt;
/* &lt;![CDATA[ */
/*
 * this javascript code  must be at end, otherwise  strange   things
 * happen, like "License Deed" doesn't show up...
 */
function startWaitingDialog() {
#if( "$!noDialogs"!="1" )  ## {
  Curriki.showLoading();
#end ## }
}
/*
 * on window unload, dialog warning of dataloss
 */
setUnloadDialog();
/*
 * HACK: Tell TinyMCE to leave-alone the URL's ... they are fine as-is.. as relative links
 * during edit in AssetTemp/xxxxxxx, and as permanent links in $wysi_publishSpace on save
 */
tinyMCE.convertURL = function(url, node, on_save) { return url; };
/* ]]&gt; */
&lt;/script&gt;{/pre}
#end ## } -- else, aka "$!newAsset"!="" 
#end ## } -- $context.user=="XWiki.XWikiGuest"</content>
</xwikidoc>
